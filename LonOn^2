#include <iostream>
#include <vector>





// Метод со сложностью O(n^2)
bool searchOn2(const std::vector>& matrix, int target) {
for (int i = 0; i < matrix.size(); i++) {
for (int j = 0; j < matrix[0].size(); j++) {
if (matrix[i][j] == target) {
return true;
}
}
}
return false;
}

// Метод со сложностью O(log(n))
bool binarySearch(const std::vector& row, int target) {
int left = 0;
int right = row.size() - 1;

while (left <= right) {
int mid = left + (right - left) / 2;

if (row[mid] == target) {
return true;
}
else if (row[mid] < target) {
left = mid + 1;
}
else {
right = mid - 1;
}
}
return false;
}

bool searchLogn(const std::vector>& matrix, int target) {
for (const auto& row : matrix) {
if (binarySearch(row, target)) {
return true;
}
}
return false;
}

// Метод со сложностью O(n)
bool searchOnn(const std::vector>& matrix, int target) {
int row = 0;
int col = matrix[0].size() - 1;

while (row < matrix.size() && col >= 0) {
if (matrix[row][col] == target) {
return true;
}
else if (matrix[row][col] > target) {
col--;
}
else {
row++;
}
}
return false;
}

int main() {
// Пример использования
std::vector> matrix = {
{ 1, 2, 3 },
{ 4, 5, 6 },
{ 7, 8, 9 }
};
int target = 5;

// O(n^2) метод
if (searchOn2(matrix, target)) {
std::cout << "Число найдено (O(n^2) метод)" << std::endl;
}
else {
std::cout << "Число не найдено (O(n^2) метод)" << std::endl;
}

// O(log(n)) метод
if (searchLogn(matrix, target)) {
std::cout << "Число найдено (O(log(n)) метод)" << std::endl;
}
else {
std::cout << "Число не найдено (O(log(n)) метод)" << std::endl;
}

// O(n) метод
if (searchOnn(matrix, target)) {
std::cout << "Число найдено (O(n) метод)" << std::endl;
}
else {
std::cout << "Число не найдено (O(n) метод)" << std::endl;
}

return 0;
}
